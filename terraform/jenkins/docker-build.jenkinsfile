pipeline {
    agent any
    environment {
        DOCKER_HUB_REGISTRY="prinsoo"
        DOCKER_CREDENTIAL_ID = 'docker-cred'
    }
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: '')
        string(name: 'IMAGE_TAG', defaultValue: 'latest', description: '')
    }
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    git credentialsId: 'github-ssh',
                        url: 'https://github.com/PrinceDalton/terraform.git',
                        branch: "${params.BRANCH_NAME}"
                }
            }
        }
        stage('Building the image') {
            steps {
                dir("${WORKSPACE}/terraform/docker") {
                    script {
                        sh """ 
                            docker build -t ${env.DOCKER_HUB_REGISTRY}/jenkins-master-slave:${params.IMAGE_TAG} .
                        """ 
                    }
                }
            }
        }
        stage('Login into') {
            steps {
                script {
                    // Login to Docker Hub
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIAL_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Use Docker CLI to login
                        sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
                    }
                }
            }
        }
        stage('Pushing into DockerHub') {
            steps {
                script {
                    // Attempt to push the Docker image, with error handling
                    def dockerPushStatus = sh(script: """
                        docker push ${env.DOCKER_HUB_REGISTRY}/jenkins-master-slave:${params.IMAGE_TAG}
                    """, returnStatus: true)
        
                    if (dockerPushStatus != 0) {
                        error("Failed to push Docker image to ${env.DOCKER_HUB_REGISTRY}/jenkins-master-slave:${params.IMAGE_TAG}")
                    }
        
                    // Cleanup Docker images after a successful push
                    sh """
                        docker rmi -f \$(docker images | grep '${env.DOCKER_HUB_REGISTRY}/jenkins-master-slave' | awk '{print \$3}')
                    """
                }
            }
        }

    }

    post {
   
   success {
      slackSend (channel: '#opk-jenkins', color: 'good', message: "SUCCESSFUL: Application Job 'jenkins-master-slave [${params.IMAGE_TAG}]' (${env.BUILD_URL})")
    }

    unstable {
      slackSend (channel: '#opk-jenkins', color: 'warning', message: "UNSTABLE: Application Job 'jenkins-master-slave [${params.IMAGE_TAG}]' (${env.BUILD_URL})")
    }

    failure {
      slackSend (channel: '#opk-jenkins', color: '#FF0000', message: "FAILURE: Application Job 'jenkins-master-slave [${params.IMAGE_TAG}]' (${env.BUILD_URL})")
    }
   
    cleanup {
      deleteDir()
    }
    }
}
